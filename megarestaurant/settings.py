"""
Django settings for megarestaurant project.

Generated by 'django-admin startproject' using Django 3.2.22.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from dotenv import load_dotenv
import os

load_dotenv()  # Carga las variables de entorno desde el archivo .env

SECRET_KEY = os.getenv('SECRET_KEY')


from pathlib import Path
from django.contrib.messages import constants as messages
import dj_database_url
import environ
env = environ.Env()
environ.Env.read_env()  # Lee las variables de entorno del archivo .env

# Definir la variable HEROKU_HOSTNAME
HEROKU_HOSTNAME = env('HEROKU_HOSTNAME', default=None)

# Luego puedes usarla de esta forma

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'HEROKU_HOSTNAME',
]


if HEROKU_HOSTNAME:
    ALLOWED_HOSTS.append(HEROKU_HOSTNAME)

#print("SECRET_KEY:", os.environ.get('SECRET_KEY'))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = env.bool('DEBUG', default=False)
DEBUG=True


HEROKU_HOSTNAME = env('HEROKU_HOSTNAME', default=None)

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '8000-zeststudio-p04restauran-lrz9o8qq380.ws-eu105.gitpod.io',
    '8000-zeststudio-p04restauran-lrz9o8qq380.ws-eu106.gitpod.io',
    'HEROKU_HOSTNAME',
    'https://megarestaurant-20c7141b277b.herokuapp.com/',  # Incluye la URL de heroku
]

if HEROKU_HOSTNAME:
    ALLOWED_HOSTS.append(HEROKU_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'crispy_forms',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'bookatable',
    'home_page',
    'contact_us',
    'menu_app',
    'crispy_bootstrap5',
]

SITE_ID = 1

LOGIN_REDIRECT_URl = '/'
LOGOUT_REDIRECT_URl = '/'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

CRISPY_TEMPLATE_PACK = 'bootstrap4'

ACCOUNT_EMAIL_VERIFICATION = 'none'

CSRF_TRUSTED_ORIGINS = [
    'https://8000-zeststudio-p04restauran-lrz9o8qq380.ws-eu106.gitpod.io'
    'https://megarestaurant-20c7141b277b.herokuapp.com/',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'megarestaurant.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'megarestaurant.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASE_URL = os.environ.get("DATABASE_URL", "sqlite:///db.sqlite3")

DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL)
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
